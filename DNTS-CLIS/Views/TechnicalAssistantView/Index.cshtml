@using System.Data
@model DataTable
@{
    Layout = "~/Views/Shared/_LayoutSupervisor.cshtml";
    ViewData["Title"] = "ASSIGN LABORATORY";
    var selectedTrackNo = ViewBag.SelectedTrackNo as string;
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-15">
            <div class="card shadow-lg border-0 rounded-lg">
                <div class="card-header bg-primary text-white text-center">
                    <h2 class="mb-0" style="font-weight: bold;">@ViewData["Title"]</h2>
                </div>
                <div class="card-body">
                    @* Success/Error Messages *@
                    @foreach (var msg in new[] { "SuccessMessage", "ErrorMessage" })
                    {
                        if (TempData[msg] != null)
                        {
                            <div class="alert alert-@(msg == "SuccessMessage" ? "success" : "danger")">@TempData[msg]</div>
                        }
                    }
                    <br />

                    <div class="row align-items-end mb-4">
                        <div class="col-md-4 mb-3 mb-md-0">
                            <form method="get" id="trackForm">
                                <label for="trackNoSelect" class="form-label">Select Exel file Uploaded</label>
                                <select id="trackNoSelect" name="selectedTrackNo" class="form-select" onchange="this.form.submit()">
                                    <option value="">-- Select Track No. --</option>
                                    @foreach (var track in (ViewBag.TrackNumbers as List<string> ?? new List<string>()))
                                    {
                                        <option value="@track" selected="@(selectedTrackNo == track ? "selected" : null)">@track</option>
                                    }
                                </select>
                            </form>
                        </div>

                        <div class="col-md-3 mb-md-0">
                            <form method="post" asp-action="AssignLaboratory" id="assignForm">
                                <label for="IDSelect" class="form-label">Laboratory</label>
                                <input type="hidden" name="selectedTrackNo" value="@selectedTrackNo" />
                                <select id="IDSelect" name="selectedIDLaboratories" class="form-select">
                                    <option value="">-- Select Laboratory --</option>
                                    @foreach (var lab in (ViewBag.LaboratoryName as List<string> ?? new List<string>()))
                                    {
                                        <option value="@lab">@lab</option>
                                    }
                                </select>
                            </form>
                        </div>

                        <div class="col-md-4 d-flex gap-2">
                            <button type="submit" class="btn btn-success" form="assignForm">Assign</button>
                            <a asp-controller="TechnicalAssistantView" asp-action="AssignHistory" class="btn btn-secondary">Assigned History</a>
                        </div>
                    </div>

                        @* Search Bar *@
                        @if (Model?.Rows.Count > 0)
                        {
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="text" id="serialSearchInput" class="form-control" placeholder="Search by Serial Number..." autocomplete="off">
                                        <button class="btn btn-outline-secondary" type="button" id="clearSearchBtn" title="Clear Search">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                <div class="gap-2 mt-1">
                                <button id="addItemBtn" class="btn btn-success" onclick="openAddModal()">
                                    <i class="fas fa-plus"></i> Add New Item
                                </button>
                                    <small class="text-muted">Search will filter records containing the entered text</small>
                                    </div>
                            </div>
                                <div class="col-md-6 d-flex align-items-center">
                                    <span id="searchResults" class="text-muted"></span>
                                </div>
                            </div>
                        }          
                     
                    @if (Model?.Rows.Count > 0)
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered w-auto" id="dataTable">
                                <thead class="table-dark">
                                    <tr>
                                        @foreach (var col in Model.Columns.Cast<DataColumn>().Where(c => c.ColumnName != "ID" && c.ColumnName != "DateofAcquisition"))
                                        {
                                            <th class="text-nowrap">@col.ColumnName</th>
                                        }
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="tableBody">
                                    @foreach (DataRow row in Model.Rows)
                                    {
                                        <tr data-id="@row["ID"]" class="table-row">
                                            @foreach (var col in Model.Columns.Cast<DataColumn>().Where(c => c.ColumnName != "ID" && c.ColumnName != "DateofAcquisition"))
                                            {
                                                <td class="text-nowrap" data-column="@col.ColumnName">@row[col]</td>
                                            }
                                            <td>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-sm edit-btn" data-id="@row["ID"]"><img src="~/Images/edit.svg" width="25" height="auto" /></button>
                                                    <button class="btn btn-sm move-history-btn" data-serial="@row[Model.Columns.Cast<DataColumn>().FirstOrDefault(c => c.ColumnName.Contains("SERIAL"))?.ColumnName]"><img src="~/Images/details.svg" width="25" height="auto" /></button>
                                                    <form method="post" asp-action="DeleteRow" class="d-inline m-0">
                                                        <input type="hidden" name="trackNo" value="@selectedTrackNo" />
                                                        <input type="hidden" name="rowId" value="@row["ID"]" />
                                                        <button type="submit" class="btn btn-sm" onclick="return confirm('Delete this row?');"><img src="~/Images/trash.svg" width="25" height="auto" /></button>
                                                    </form>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @* No Results Message *@
                        <div id="noResultsMessage" class="alert alert-info text-center" style="display: none;">
                            <i class="fas fa-search fa-2x mb-2"></i>
                            <h6>No matching records found</h6>
                            <p class="mb-0">Try adjusting your search terms or clear the search to view all records.</p>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">No records found.</div>
                    }

                    @*Delete the table*@
                    @if (!string.IsNullOrEmpty(selectedTrackNo))
                    {
                        <div class="mt-3">
                            <form method="post" asp-action="DeleteTrackTable">
                                <input type="hidden" name="trackNo" value="@selectedTrackNo" />
                                <button type="submit" class="btn btn-danger" onclick="return confirm('Delete this table?');">Delete File</button>
                            </form>
                        </div>
                    }

                    @* Edit Modal *@
                    <div id="editModal" class="modal fade" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Edit Record</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="editForm" method="post">
                                        <input type="hidden" name="trackNo" id="editTrackNo" />
                                        <input type="hidden" name="rowId" id="editRowId" />

                                        @* Keep other fields read-only *@
                                        <div id="editFields"></div>

                                        @* STATUS dropdown (editable) *@
                                        <div class="mb-3">
                                            <label for="editStatus" class="form-label">Status</label>
                                            <select name="updatedValues[STATUS]" id="editStatus" class="form-select">
                                                <option value="UNKNOWN">UNKNOWN</option>
                                                <option value="FUNCTIONAL">FUNCTIONAL</option>
                                                <option value="DEFECTIVE">DEFECTIVE</option>
                                            </select>
                                        </div>

                                        <button type="submit" class="btn btn-success mt-3">Save</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Modal for Adding New Item -->
                    <div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-lg" role="document">
                            <div class="modal-content shadow-lg rounded">
                                <div class="modal-header bg-success text-white">
                                    <h5 class="modal-title">
                                        <i class="fas fa-plus-circle"></i> Add New Item
                                    </h5>
                                </div>
                                <div class="modal-body">
                                    <form id="addForm">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label for="addCTN">CTN:</label>
                                                <input type="text" id="addCTN" class="form-control">
                                            </div>
                                            <div class="col-md-6">
                                                <label for="addParticular">Particular:</label>
                                                <input type="text" id="addParticular" class="form-control">
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="addDateOfAcquisition">Date Of Acquisition:</label>
                                                <input type="date" id="addDateOfAcquisition" class="form-control">
                                            </div>
                                            <div class="col-md-6">
                                                <label for="addBrand">Brand:</label>
                                                <input type="text" id="addBrand" class="form-control">
                                            </div>
                                            <div class="col-md-6">
                                                <label for="addSerialStickerNumber">Serial Sticker Number:</label>
                                                <input type="text" id="addSerialStickerNumber" class="form-control">
                                            </div>
                                        </div>
                                        <div class="row mt-3">
                                            <div class="col-md-6">
                                                <label for="addStatus">Status:</label>
                                                <select id="addStatus" class="form-control">
                                                    <option value="FUNCTIONAL">FUNCTIONAL</option>
                                                    <option value="In Use">In Use</option>
                                                    <option value="Under Repair">Under Repair</option>
                                                    <option value="Out of Service">Out of Service</option>
                                                </select>
                                            </div>
                                            <div class="col-md-6">
                                                <label for="addLocation">Location:</label>
                                                <input type="text" id="addLocation" class="form-control">
                                            </div>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" onclick="$('#addModal').modal('hide');">
                                        <i class="fas fa-times"></i> Cancel
                                    </button>
                                    <button type="button" class="btn btn-success" id="saveAddBtn">
                                        <i class="fas fa-save"></i> Save Item
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    @* Move History Modal *@
                    <div id="moveHistoryModal" class="modal fade" tabindex="-1">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header bg-info text-white">
                                    <h5 class="modal-title">Move History</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div id="moveHistoryContent">
                                        <div class="text-center">
                                            <div class="spinner-border" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <p class="mt-2">Loading move history...</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Search functionality
            const searchInput = document.getElementById("serialSearchInput");
            const clearSearchBtn = document.getElementById("clearSearchBtn");
            const tableRows = document.querySelectorAll(".table-row");
            const searchResults = document.getElementById("searchResults");
            const noResultsMessage = document.getElementById("noResultsMessage");
            const dataTable = document.getElementById("dataTable");

            // Find all serial number columns (columns that contain "SERIAL" in their name)
            const serialColumns = [];
            document.querySelectorAll("thead th").forEach((th, index) => {
                if (th.textContent.toUpperCase().includes("SERIAL")) {
                    serialColumns.push(index);
                }
            });

            function performSearch() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                let visibleCount = 0;

                if (searchTerm === "") {
                    // Show all rows
                    tableRows.forEach(row => {
                        row.style.display = "";
                    });
                    visibleCount = tableRows.length;
                    searchResults.textContent = "";
                    noResultsMessage.style.display = "none";
                    dataTable.style.display = "";
                } else {
                    // Filter rows based on serial number columns
                    tableRows.forEach(row => {
                        let hasMatch = false;

                        // Check all serial number columns
                        serialColumns.forEach(columnIndex => {
                            const cell = row.cells[columnIndex];
                            if (cell && cell.textContent.toLowerCase().includes(searchTerm)) {
                                hasMatch = true;
                            }
                        });

                        if (hasMatch) {
                            row.style.display = "";
                            visibleCount++;
                        } else {
                            row.style.display = "none";
                        }
                    });

                    // Update results counter
                    if (visibleCount > 0) {
                        searchResults.textContent = `Found ${visibleCount} matching record${visibleCount !== 1 ? 's' : ''}`;
                        noResultsMessage.style.display = "none";
                        dataTable.style.display = "";
                    } else {
                        searchResults.textContent = "";
                        noResultsMessage.style.display = "block";
                        dataTable.style.display = "none";
                    }
                }
            }

            // Real-time search as user types
            if (searchInput) {
                searchInput.addEventListener("input", performSearch);

                // Clear search functionality
                clearSearchBtn.addEventListener("click", function() {
                    searchInput.value = "";
                    performSearch();
                    searchInput.focus();
                });

                // Show/hide clear button based on input
                searchInput.addEventListener("input", function() {
                    if (this.value.length > 0) {
                        clearSearchBtn.style.display = "block";
                    } else {
                        clearSearchBtn.style.display = "none";
                    }
                });
            }

            // Function to load move history
            function loadMoveHistory(serialNumber) {
                document.getElementById("moveHistoryContent").innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading move history...</p>
                    </div>`;

                fetch(`/TechnicalAssistantView/GetMoveHistory?serialNumber=${encodeURIComponent(serialNumber)}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.history && data.history.length > 0) {
                            let historyHtml = `
                                <h6><strong>Serial Number:</strong> ${serialNumber}</h6>
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead class="table-info">
                                            <tr>
                                                <th>Date</th>
                                                <th>From</th>
                                                <th>To</th>
                                                <th>Purpose</th>
                                                <th>Requested By</th>
                                            </tr>
                                        </thead>
                                        <tbody>`;

                            data.history.forEach(record => {
                                const date = record.date ? new Date(record.date).toLocaleDateString() : 'N/A';
                                historyHtml += `
                                    <tr>
                                        <td>${date}</td>
                                        <td>${record.from || 'N/A'}</td>
                                        <td>${record.to || 'N/A'}</td>
                                        <td>${record.purpose || 'N/A'}</td>
                                        <td>${record.requestedBy || 'N/A'}</td>
                                    </tr>`;
                            });

                            historyHtml += `
                                        </tbody>
                                    </table>
                                </div>`;

                            document.getElementById("moveHistoryContent").innerHTML = historyHtml;
                        } else {
                            document.getElementById("moveHistoryContent").innerHTML = `
                                <div class="text-center">
                                    <i class="fas fa-info-circle fa-3x text-muted mb-3"></i>
                                    <h6>No Move History Found</h6>
                                    <p class="text-muted">This equipment has no recorded movement history.</p>
                                </div>`;
                        }
                    })
                    .catch(error => {
                        console.error("Error fetching move history:", error);
                        document.getElementById("moveHistoryContent").innerHTML = `
                            <div class="text-center text-danger">
                                <i class="fas fa-exclamation-triangle fa-3x mb-3"></i>
                                <h6>Error Loading History</h6>
                                <p>Unable to load move history. Please try again.</p>
                            </div>`;
                    });
            }

            // Edit functionality 
            document.querySelectorAll(".edit-btn").forEach(button => {
                button.addEventListener("click", function () {
                    let rowId = this.getAttribute("data-id");
                    document.getElementById("editRowId").value = rowId;
                    document.getElementById("editTrackNo").value = "@selectedTrackNo";

                    let row = document.querySelector(`tr[data-id='${rowId}']`);
                    let fieldsContainer = document.getElementById("editFields");
                    fieldsContainer.innerHTML = "";

                    row.querySelectorAll("td[data-column]").forEach(cell => {
                        let column = cell.getAttribute("data-column");
                        let value = cell.innerText.trim();

                        if (column === "STATUS") {
                            document.getElementById("editStatus").value = value;
                        } else {
                            fieldsContainer.innerHTML += `
                                <div class="mb-3">
                                    <label class="form-label">${column}</label>
                                    <input type="text" class="form-control" value="${value}" readonly />
                                </div>`;
                        }
                    });

                    new bootstrap.Modal(document.getElementById("editModal")).show();
                });
            });

            // Move history functionality
            document.querySelectorAll(".move-history-btn").forEach(button => {
                button.addEventListener("click", function () {
                    let serialNumber = this.getAttribute("data-serial");
                    let modal = new bootstrap.Modal(document.getElementById("moveHistoryModal"));
                    modal.show();
                    loadMoveHistory(serialNumber);
                });
            });

            // Form submission
            document.getElementById("editForm").addEventListener("submit", function (event) {
                event.preventDefault();
                fetch("/TechnicalAssistantView/UpdateRow", {
                    method: "POST",
                    body: new FormData(this)
                })
                .then(() => location.reload())
                .catch(error => console.error("Update failed:", error));
            });
        });

             // Add Item
          function openAddModal() {
            // Check if track number is selected
            const trackNo = document.getElementById("trackNoSelect").value;
            if (!trackNo) {
                alert("Please select a Track No first");
                return;
            }

            // Clear the form fields
            document.getElementById("addForm").reset();

            // Show the modal
               const modal = new bootstrap.Modal(document.getElementById("addModal"));
               modal.show();
        }

        // Handle Save New Item Button Click
        document.getElementById("saveAddBtn").addEventListener("click", function() {
            const trackNo = document.getElementById("trackNoSelect").value;

            if (!trackNo) {
                alert("Track No is required");
                return;
            }

            // Validate required fields
            const ctn = document.getElementById("addCTN").value;
            const particular = document.getElementById("addParticular").value;

            if (!ctn.trim()) {
                alert("CTN is required");
                return;
            }

            if (!particular.trim()) {
                alert("Particular is required");
                return;
            }

            // Prepare data to send to server
            const data = {
                TrackNo: trackNo,
                CTN: ctn,
                Particular: particular,
                DateOfAcquisition: document.getElementById("addDateOfAcquisition").value,
                Brand: document.getElementById("addBrand").value,
                SerialStickerNumber: document.getElementById("addSerialStickerNumber").value,
                Status: document.getElementById("addStatus").value,
                Location: document.getElementById("addLocation").value
            };

            console.log("Sending new item data:", data);

            fetch('/TechnicalAssistantView/AddNewItem', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(text || `Server returned ${response.status}`);
                    });
                }
                return response.json();
            })
            .then(result => {
                console.log("Success:", result);
                alert("Item added successfully!");
                $('#addModal').modal('hide');
            })
            .catch(error => {
                console.error("Error:", error);
                alert("Failed to add item: " + error.message);
            });
        });

                function formatDateToLongForm(dateStr) {
            if (!dateStr) return '';
            const date = new Date(dateStr);
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
    </script>
