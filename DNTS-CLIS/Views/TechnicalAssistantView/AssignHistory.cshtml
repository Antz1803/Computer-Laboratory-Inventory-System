@model List<string>

@{
    Layout = "~/Views/Shared/_LayoutSupervisor.cshtml";
    ViewData["Title"] = "ASSIGN HISTORY";
    var laboratories = ViewBag.Laboratories as List<string> ?? new List<string>();
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-15">
            <div class="card shadow-lg border-0 rounded-lg">
                <div class="card-header bg-primary text-white text-center">
                    <h2 class="mb-0" style="font-weight: bold;">@ViewData["Title"]</h2>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6 mb-3 mb-md-0">
                            <label for="selectedLaboratory" class="form-label">Select Laboratory:</label>
                            <select id="selectedLaboratory" class="form-select" onchange="fetchTrackNumbers()">
                                <option value="">-- Select Laboratory --</option>
                                @foreach (var lab in laboratories)
                                {
                                    <option value="@lab">@lab</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="selectedTrackNo" class="form-label">Assigned Track Numbers:</label>
                            <select id="selectedTrackNo" class="form-select" onchange="fetchTableData()">
                                <option value="">-- Select Track No --</option>
                            </select>
                        </div>
                    </div>

                    <div class="mt-4">
                        <h4 class="mb-3 text-center">Track Details</h4>
                        <button onclick="printTable()" class="btn btn-info">
                            <img src="@Url.Content("~/Images/print.svg")" alt="Print Icon" style="vertical-align: middle;height: 20px;">
                        </button>
                        <div class="table-responsive">
                            <table class="table table-striped table-hover table-bordered text-center" id="trackTable">
                                <thead class="table-dark">
                                    <tr id="tableHead"></tr>
                                </thead>
                                <tbody id="tableBody"></tbody>
                            </table>
                        </div>
                    </div>

                        <a href="/TechnicalAssistantView/Index" class="btn btn-secondary">Back to Assign Laboratory</a>

                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function() {
    });

    function fetchTrackNumbers() {
        let laboratory = document.getElementById("selectedLaboratory").value;
        let trackNoDropdown = document.getElementById("selectedTrackNo");
        trackNoDropdown.innerHTML = "<option value=''>-- Select Track No --</option>";

        // Clear the table when changing laboratory
        document.getElementById("tableHead").innerHTML = "";
        document.getElementById("tableBody").innerHTML = "";

        if (laboratory) {
            fetch(`/TechnicalAssistantView/GetAssignedTracks?laboratoryName=${encodeURIComponent(laboratory)}`)
                .then(response => response.json())
                .then(data => {
                    console.log("Received Track Numbers:", data);

                    if (data.length === 0) {
                        alert("No Track Numbers assigned to this laboratory.");
                    }

                    data.forEach(trackNo => {
                        let option = document.createElement("option");
                        option.value = trackNo;
                        option.textContent = trackNo;
                        trackNoDropdown.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error fetching track numbers:', error);
                    alert("Error loading track numbers. Please try again.");
                });
        }
    }

       function fetchTableData() {
        let trackNo = document.getElementById("selectedTrackNo").value;
        let tableHead = document.getElementById("tableHead");
        let tableBody = document.getElementById("tableBody");

        tableHead.innerHTML = "";
        tableBody.innerHTML = "";

        if (trackNo) {
            fetch(`/TechnicalAssistantView/GetTableDataOne?trackNo=${encodeURIComponent(trackNo)}`)
                .then(response => response.json())
                .then(data => {
                    console.log("Table Data Received:", data);

                    if (data.length === 0) {
                        // Show "No data" message in the table
                        tableBody.innerHTML = `
                            <tr>
                                <td colspan="100%" class="text-center py-3">No data found for this Track Number.</td>
                            </tr>
                        `;
                        return;
                    }

                    // Table header row
                    let headerRow = tableHead;

                    // All column names from the first data object (excluding ID)
                    let columns = Object.keys(data[0]).filter(column => column.toLowerCase() !== "id");

                    // Create individual header cells
                    columns.forEach(column => {
                        let th = document.createElement("th");
                        th.textContent = column;
                        th.className = "text-nowrap";
                        headerRow.appendChild(th);
                    });

                    data.forEach(row => {
                        let tr = document.createElement("tr");

                        columns.forEach(column => {
                            let td = document.createElement("td");

                            let cellValue = row[column];
                            if (cellValue === null || cellValue === undefined || typeof cellValue === 'object') {
                                td.textContent = 'N/A';
                            } else {
                                td.textContent = cellValue;
                            }

                            td.className = "text-nowrap";
                            tr.appendChild(td);
                        });

                        tableBody.appendChild(tr);
                    });
                })
                .catch(error => {
                    console.error('Error fetching table data:', error);
                    alert("Error loading table data. Please try again.");
                });
        }
    }

        function printTable() {
        const printContents = document.getElementById("trackTable").cloneNode(true); 
        const originalBody = document.body;
        const printBody = document.createElement('body');
        const printHeader = document.createElement('div');
        const logoContainer = document.createElement('div');
        const logoImage = document.createElement('img'); 
        const titleLabContainer = document.createElement('div');
        const printTitle = document.createElement('div');
        const timestamp = document.createElement('div');
        const selectedLaboratory = document.getElementById("selectedLaboratory").value;
        const laboratoryText = selectedLaboratory ? ` - ${selectedLaboratory.toUpperCase()}` : '';

        const imageUrl = '@Url.Content("~/Images/dnts-act.png")';
        logoImage.src = imageUrl;
        logoImage.style.width = '700px';
        logoImage.style.height = '85px'; 

        printHeader.style.display = 'flex';
        printHeader.style.justifyContent = 'space-between';
        printHeader.style.alignItems = 'center';
        printHeader.style.marginBottom = '10px';
        printHeader.style.fontFamily = 'Arial, sans-serif';
        printHeader.style.width = '100%';

        logoContainer.style.textAlign = 'left';
        logoContainer.style.width = 'auto';
        logoContainer.appendChild(logoImage); 

        titleLabContainer.style.textAlign = 'right';

        printTitle.style.fontSize = '1.2em';
        printTitle.style.fontWeight = 'bold';
        printTitle.style.marginBottom = '5px';
        printTitle.textContent = `${laboratoryText}`;

        titleLabContainer.appendChild(printTitle);
        printHeader.appendChild(logoContainer);
        printHeader.appendChild(titleLabContainer);

        printBody.appendChild(printHeader);
        printBody.appendChild(printContents);

        document.body = printBody;

        window.print();

        document.body = originalBody;
    }

        document.addEventListener("DOMContentLoaded", function () {
        // Format date columns specifically
        function formatDateColumns() {
            // Target all table cells and check their content for dates
            const allCells = document.querySelectorAll('#trackTable tbody td');

            allCells.forEach(cell => {
                const dateText = cell.textContent.trim();
                // Check if the cell contains a date in YYYY-MM-DD or YYYY-M-D format
                if (dateText && dateText.match(/^\d{4}-\d{1,2}-\d{1,2}$/)) {
                    const date = new Date(dateText);
                    if (!isNaN(date.getTime())) {
                        cell.textContent = date.toLocaleDateString('en-US', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                        });
                    }
                }
            });
        }

        // Format dates whenever the table content changes
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    setTimeout(formatDateColumns, 100);
                }
            });
        });

        const tableBody = document.getElementById('tableBody');
        if (tableBody) {
            observer.observe(tableBody, { childList: true, subtree: true });
        }
    });
</script>