@{
    ViewData["Title"] = "Technical Assistant Laboratory";
}
<style>
    .table th, .table td {
        vertical-align: middle;
        text-align: center;
    }

    .table thead th {
        background-color: #d1e7dd;
        border-bottom: 1px solid black;
        color: black;
    }

    .search-container {
        display: flex;
        gap: 15px;
        align-items: end;
        margin-top: 30px;
        flex-wrap: wrap;
    }

    .search-box {
        position: relative;
    }

        .search-box input {
            padding-right: 35px;
        }

        .search-box .search-icon {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }

    .clear-search {
        position: absolute;
        right: 30px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #dc3545;
        cursor: pointer;
        font-size: 14px;
        display: none;
    }

    .search-results-info {
        margin-top: 10px;
        font-size: 14px;
        color: #6c757d;
    }

    .highlight {
        background-color: #fff3cd;
        font-weight: bold;
    }
</style>
<h2>Laboratory: @ViewBag.LaboratoryName</h2>

<!-- Search and Filter Controls -->
<div class="search-container">
    <!-- TrackNo Dropdown -->
    <div class="form-group" style="width:245px;">
        <label for="selectedTrackNo">Select Excel File:</label>
        <select id="selectedTrackNo" class="form-control" onchange="fetchTableData()" style="text-align:center;">
            <option value="">-- Select Excel File --</option>
            @foreach (var trackNo in ViewBag.TrackNos)
            {
                <option value="@trackNo">@trackNo</option>
            }
        </select>
    </div>

    <!-- Search Box -->
    <div class="form-group search-box" style="width:300px;">
        <label for="serialSearch">Search Serial Number:</label>
        <input type="text" id="serialSearch" class="form-control" placeholder="Type to search serial numbers..." oninput="searchSerialNumbers()">
        <i class="fas fa-search search-icon"></i>
        <button type="button" class="clear-search" id="clearSearch" onclick="clearSearch()">
            <i class="fas fa-times"></i>
        </button>
    </div>
</div>

<!-- Search Results Info -->
<div class="search-results-info" id="searchResultsInfo" style="display: none;"></div>

<!-- Table to display data -->
<div class="mt-4">
      <button id="addItemBtn" class="btn btn-success" onclick="openAddModal()">
            <i class="fas fa-plus"></i> Add New Item
        </button> 
    <h1> </h1>
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover text-center" id="trackTable">
            <thead id="tableHead"></thead>
            <tbody id="tableBody"></tbody>
        </table>
    </div>
</div>

<!-- Modal for Editing Details -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content shadow-lg rounded">
            <div class="modal-header bg-secondary text-white">
                <h5 class="modal-title">
                    <i class="fas fa-edit"></i> Edit Item Details
                </h5>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="editId">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="editCTN">CTN:</label>
                            <input type="text" id="editCTN" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label for="editParticular">Particular:</label>
                            <input type="text" id="editParticular" class="form-control">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="editBrand">Brand:</label>
                            <input type="text" id="editBrand" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label for="editSerialStickerNumber">Serial Sticker Number:</label>
                            <input type="text" id="editSerialStickerNumber" class="form-control">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="editStatus">Status:</label>
                            <input type="text" id="editStatus" class="form-control" disabled>
                        </div>
                        <div class="col-md-6">
                            <label for="editLocation">Location:</label>
                            <input type="text" id="editLocation" class="form-control">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="$('#editModal').modal('hide');">
                    <i class="fas fa-times"></i> Close
                </button>
                <button type="button" class="btn btn-success" id="saveEditBtn">
                    <i class="fas fa-save"></i> Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Repair Details -->
<div class="modal fade" id="repairModal" tabindex="-1" role="dialog" aria-labelledby="repairModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content shadow-lg rounded">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="repairModalLabel">
                    <i class="fas fa-tools"></i> Repair Details
                </h5>
            </div>
            <div class="modal-body p-4">
                <form id="repairForm">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="id">ID:</label>
                            <input type="text" id="id" class="form-control" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="ctn">CTN:</label>
                            <input type="text" id="ctn" class="form-control" readonly>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="particular">Particular:</label>
                            <input type="text" id="particular" class="form-control" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="brand">Brand:</label>
                            <input type="text" id="brand" class="form-control" readonly>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="serialStickerNumber">Serial Sticker Number:</label>
                            <input type="text" id="serialStickerNumber" class="form-control" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="status">Status:</label>
                            <input type="text" id="status" class="form-control" readonly>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="location">Location:</label>
                            <input type="text" id="location" class="form-control" readonly>
                        </div>
                    </div>

                    <div class="form-group mt-4">
                        <label for="description">Description of Damage:</label>
                        <textarea id="description" class="form-control" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-secondary" onclick="$('#repairModal').modal('hide');">
                    <i class="fas fa-times"></i> Close
                </button>

                <button type="button" class="btn btn-success" id="saveRepairBtn">
                    <i class="fas fa-save"></i> Save
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Adding New Item -->
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content shadow-lg rounded">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-plus-circle"></i> Add New Item
                </h5>
            </div>
            <div class="modal-body">
                <form id="addForm">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="addCTN">CTN:</label>
                            <input type="text" id="addCTN" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label for="addParticular">Particular:</label>
                            <select id="addParticular" class="form-control">
                                <option value="MONITOR">MONITOR</option>
                                <option value="SSD">SSD</option>
                                <option value="RAM">RAM</option>
                                <option value="KEYBOARD">KEYBOARD</option>
                                <option value="MOUSE">MOUSE</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="addDateOfAcquisition">Date Of Acquisition:</label>
                            <input type="date" id="addDateOfAcquisition" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label for="addBrand">Brand:</label>
                            <select id="addBrand" class="form-control">
                                <option value="A4TECH">A4TECH</option>
                                <option value="SAMSUNG">SAMSUNG</option>
                                <option value="LENOVO">LENOVO</option>
                                <option value="DELL">DELL</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="addSerialStickerNumber">Serial Sticker Number:</label>
                            <input type="text" id="addSerialStickerNumber" class="form-control">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="addStatus">Status:</label>
                            <select id="addStatus" class="form-control">
                                <option value="FUNCTIONAL">FUNCTIONAL</option>
                                <option value="In Use">In Use</option>
                                <option value="Under Repair">Under Repair</option>
                                <option value="Out of Service">Out of Service</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="addLocation">Location:</label>
                            <input type="text" id="addLocation" class="form-control">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="$('#addModal').modal('hide');">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button type="button" class="btn btn-success" id="saveAddBtn">
                    <i class="fas fa-save"></i> Save Item
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Global variables to store original data
    let originalTableData = [];
    let currentFilteredData = [];

    function fetchTableData() {
        let trackNo = document.getElementById("selectedTrackNo").value;
        let tableHead = document.getElementById("tableHead");
        let tableBody = document.getElementById("tableBody");

        tableHead.innerHTML = "";
        tableBody.innerHTML = "";

        // Clear search when changing track
        clearSearch();

        if (trackNo) {
            fetch(`/TALaboratory/GetTableDataOne?trackNo=${encodeURIComponent(trackNo)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Fetched data:", data);

                    // Store original data globally
                    originalTableData = data || [];
                    currentFilteredData = [...originalTableData];

                    if (!data || data.length === 0) {
                        tableBody.innerHTML = "<tr><td colspan='8'>No data available</td></tr>";
                        return;
                    }

                    // Build and display the table
                    buildTable(currentFilteredData);
                    updateSearchResultsInfo();
                })
                .catch(error => {
                    console.error('Error fetching table data:', error);
                    tableBody.innerHTML = `<tr><td colspan='8'>Error loading data: ${error.message}</td></tr>`;
                });
        } else {
            tableBody.innerHTML = "<tr><td colspan='8'>Please select a Track No</td></tr>";
            originalTableData = [];
            currentFilteredData = [];
            updateSearchResultsInfo();
        }
    }

    function buildTable(data) {
        let tableHead = document.getElementById("tableHead");
        let tableBody = document.getElementById("tableBody");

        // Clear existing content
        tableHead.innerHTML = "";
        tableBody.innerHTML = "";

        if (!data || data.length === 0) {
            tableBody.innerHTML = "<tr><td colspan='8'>No data available</td></tr>";
            return;
        }

        // Get all possible columns from the first data item
        const firstItem = data[0];
        const allColumns = ["CTN", "Particular", "Brand", "serialstickerno", "Status"];

        // Only add Location if it exists in the data
        if (firstItem.hasOwnProperty("Location")) {
            allColumns.push("Location");
        }

        let headerRow = document.createElement("tr");
        tableHead.appendChild(headerRow);

        // Create headers for each column
        allColumns.forEach(column => {
            let th = document.createElement("th");
            // Format the display name ("SerialStickerNumber" -> "Serial Sticker Number")
            if (column === "serialstickerno") {
                th.textContent = "Serial Sticker Number";
            } else {
                th.textContent = column;
            }
            headerRow.appendChild(th);
        });

        let actionsHeader = document.createElement("th");
        actionsHeader.textContent = "";
        headerRow.appendChild(actionsHeader);

        // Create table rows for each data item
        data.forEach(row => {
            let tr = document.createElement("tr");

            allColumns.forEach(column => {
                let td = document.createElement("td");
                let cellValue = getPropertyCaseInsensitive(row, column) || "";

                // Highlight search term in serial number column
                if (column === "serialstickerno") {
                    td.innerHTML = highlightSearchTerm(cellValue, document.getElementById("serialSearch").value);
                } else {
                    td.textContent = cellValue;
                }

                tr.appendChild(td);
            });

            // Add actions
            let actionsTd = document.createElement("td");

            let repairBtn = document.createElement("button");
            repairBtn.innerHTML = '<i class="fas fa-tools"></i> Repair';
            repairBtn.className = "btn btn-warning btn-sm m-1";
            repairBtn.onclick = function() {
                openRepairModal(row);
            };

            let editBtn = document.createElement("button");
            editBtn.innerHTML = '<i class="fas fa-edit"></i> Edit';
            editBtn.className = "btn btn-primary btn-sm m-1";
            editBtn.onclick = function() {
                editItem(row);
            };

            actionsTd.appendChild(editBtn);
            actionsTd.appendChild(repairBtn);
            tr.appendChild(actionsTd);

            tableBody.appendChild(tr);
        });
    }

    function searchSerialNumbers() {
        const searchTerm = document.getElementById("serialSearch").value.toLowerCase();
        const clearBtn = document.getElementById("clearSearch");

        // Show/hide clear button
        if (searchTerm.length > 0) {
            clearBtn.style.display = "block";
        } else {
            clearBtn.style.display = "none";
        }

        // Filter data based on search term
        if (searchTerm.length === 0) {
            // No search term, show all data
            currentFilteredData = [...originalTableData];
        } else {
            // Filter data where serial number contains the search term
            currentFilteredData = originalTableData.filter(item => {
                const serialNumber = getPropertyCaseInsensitive(item, "serialstickerno") || "";
                return serialNumber.toLowerCase().includes(searchTerm);
            });
        }

        // Rebuild table with filtered data
        buildTable(currentFilteredData);
        updateSearchResultsInfo();
    }

    function clearSearch() {
        document.getElementById("serialSearch").value = "";
        document.getElementById("clearSearch").style.display = "none";
        currentFilteredData = [...originalTableData];
        buildTable(currentFilteredData);
        updateSearchResultsInfo();
    }

    function highlightSearchTerm(text, searchTerm) {
        if (!searchTerm || searchTerm.length === 0) {
            return text;
        }

        const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
        return text.replace(regex, '<span class="highlight">$1</span>');
    }

    function updateSearchResultsInfo() {
        const infoElement = document.getElementById("searchResultsInfo");
        const searchTerm = document.getElementById("serialSearch").value;

        if (searchTerm.length > 0) {
            const totalResults = currentFilteredData.length;
            const totalItems = originalTableData.length;

            infoElement.textContent = `Found ${totalResults} result${totalResults !== 1 ? 's' : ''} out of ${totalItems} items for "${searchTerm}"`;
            infoElement.style.display = "block";
        } else {
            infoElement.style.display = "none";
        }
    }

    function editItem(item) {
        console.log("Opening edit modal for item:", item);

        // Populate the edit modal using case-insensitive getter
           document.getElementById("editId").value = getPropertyCaseInsensitive(item, "id");
        document.getElementById("editCTN").value = getPropertyCaseInsensitive(item, "ctn");
        document.getElementById("editParticular").value = getPropertyCaseInsensitive(item, "particular");
        document.getElementById("editBrand").value = getPropertyCaseInsensitive(item, "brand");
        document.getElementById("editSerialStickerNumber").value = getPropertyCaseInsensitive(item, "serialstickerno");
        document.getElementById("editStatus").value = getPropertyCaseInsensitive(item, "status");

        // Only try to set the Location if the edit field exists
        const locationField = document.getElementById("editLocation");
        if (locationField) {
            const hasLocation = Object.keys(item).some(key => key.toLowerCase() === "location");
            locationField.value = hasLocation ? getPropertyCaseInsensitive(item, "location") : "";

            // Show/hide the location field container based on whether it exists in the data
            const locationContainer = locationField.closest(".col-md-6");
            if (locationContainer) {
                locationContainer.style.display = hasLocation ? "block" : "none";
            }
        }

        // Show the modal using jQuery
        $('#editModal').modal('show');
    }

    // Helper function to get property values case-insensitively
    function getPropertyCaseInsensitive(obj, propertyName) {
        if (!obj || !propertyName) return "";

        // Direct match first
        if (obj[propertyName] !== undefined) return obj[propertyName];

        // Try case-insensitive match
        propertyName = propertyName.toLowerCase();
        for (let key in obj) {
            if (key.toLowerCase() === propertyName) {
                return obj[key];
            }
        }

        return "";
    }

    document.getElementById("saveEditBtn").addEventListener("click", function() {
        const trackNo = document.getElementById("selectedTrackNo").value;
        const id = document.getElementById("editId").value;

        if (!trackNo) {
            alert("Track No is required");
            return;
        }

        if (!id) {
            alert("Item ID is missing");
            return;
        }

        const data = {
            Id: parseInt(id),
            CTN: document.getElementById("editCTN").value,
            Particular: document.getElementById("editParticular").value,
            Brand: document.getElementById("editBrand").value,
            SerialStickerNumber: document.getElementById("editSerialStickerNumber").value,
            Status: document.getElementById("editStatus").value,
            Location: document.getElementById("editLocation").value,
            TrackNo: trackNo
        };

        console.log("Sending data to server:", data);

        fetch('/TALaboratory/SaveEditedItem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            console.log("Server response:", response);

            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Server returned ${response.status}`);
                });
            }
            return response.json();
        })
        .then(result => {
            console.log("Success:", result);
            alert("Item updated successfully!");
            $('#editModal').modal('hide');
            fetchTableData();
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Failed to update item: " + error.message);
        });
    });

    document.addEventListener("DOMContentLoaded", function() {
        const trackNoSelect = document.getElementById("selectedTrackNo");
        if (trackNoSelect.value) {
            fetchTableData();
        }
    });

    //Repair
        function openRepairModal(item) {
        console.log("Opening repair modal for item:", item);

        // Populate the repair modal fields
        document.getElementById("id").value = getPropertyCaseInsensitive(item, "id");
        document.getElementById("ctn").value = getPropertyCaseInsensitive(item, "ctn");
        document.getElementById("particular").value = getPropertyCaseInsensitive(item, "particular");
        document.getElementById("brand").value = getPropertyCaseInsensitive(item, "brand");
        document.getElementById("serialStickerNumber").value = getPropertyCaseInsensitive(item, "serialstickerno");
        document.getElementById("status").value = getPropertyCaseInsensitive(item, "status");

        // Handle optional fields
        const locationField = document.getElementById("location");
        if (locationField) {
            const hasLocation = Object.keys(item).some(key => key.toLowerCase() === "location");
            locationField.value = hasLocation ? getPropertyCaseInsensitive(item, "location") : "";
        }

        const dateField = document.getElementById("dateOfAcquisition");
        if (dateField) {
            const hasDate = Object.keys(item).some(key => key.toLowerCase() === "dateofacquisition");
            dateField.value = hasDate ? getPropertyCaseInsensitive(item, "dateOfAcquisition") : "";
        }

        // Clear description field
        document.getElementById("description").value = "";

        // Show the modal
        $('#repairModal').modal('show');
    }

    // Handle Save Repair Button Click
    document.getElementById("saveRepairBtn").addEventListener("click", function () {
        const trackNo = document.getElementById("selectedTrackNo").value;
        const id = document.getElementById("id").value;
        const description = document.getElementById("description").value;

        // Validation checks
        if (!trackNo) {
            alert("Track No is required");
            return;
        }

        if (!id) {
            alert("Item ID is missing");
            return;
        }

        if (!description.trim()) {
            alert("Please provide a description of the damage");
            return;
        }

        // Prepare data to send to server
        const data = {
            Id: parseInt(id),
            ItemId: parseInt(id),
            TrackNo: trackNo,
            Description: description,
            Status: "Pending", 
            CTN: document.getElementById("ctn").value,
            Particular: document.getElementById("particular").value,
            Brand: document.getElementById("brand").value,
            SerialStickerNumber: document.getElementById("serialStickerNumber").value
        };

        // If location field exists, include it
        const locationField = document.getElementById("location");
        if (locationField && locationField.value) {
            data.Location = locationField.value;
        }

        console.log("Sending repair request data:", data);

        fetch('/TALaboratory/RequestRepair', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Server returned ${response.status}`);
                });
            }
            return response.json();
        })
        .then(result => {
            console.log("Success:", result);
            alert("Repair request submitted successfully!");
            $('#repairModal').modal('hide');
            fetchTableData();
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Failed to submit repair request: " + error.message);
        });
    });

    // Add Item
      function openAddModal() {
        // Check if track number is selected
        const trackNo = document.getElementById("selectedTrackNo").value;
        if (!trackNo) {
            alert("Please select a Track No first");
            return;
        }

        // Clear the form fields
        document.getElementById("addForm").reset();

        // Show the modal
        $('#addModal').modal('show');
    }

    // Handle Save New Item Button Click
    document.getElementById("saveAddBtn").addEventListener("click", function() {
        const trackNo = document.getElementById("selectedTrackNo").value;

        if (!trackNo) {
            alert("Track No is required");
            return;
        }

        // Validate required fields
        const ctn = document.getElementById("addCTN").value;
        const particular = document.getElementById("addParticular").value;

        if (!ctn.trim()) {
            alert("CTN is required");
            return;
        }

        if (!particular.trim()) {
            alert("Particular is required");
            return;
        }

        // Prepare data to send to server
        const data = {
            TrackNo: trackNo,
            CTN: ctn,
            Particular: particular,
            DateOfAcquisition: document.getElementById("addDateOfAcquisition").value,
            Brand: document.getElementById("addBrand").value,
            SerialStickerNumber: document.getElementById("addSerialStickerNumber").value,
            Status: document.getElementById("addStatus").value,
            Location: document.getElementById("addLocation").value
        };

        console.log("Sending new item data:", data);

        fetch('/TALaboratory/AddNewItem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Server returned ${response.status}`);
                });
            }
            return response.json();
        })
        .then(result => {
            console.log("Success:", result);
            alert("Item added successfully!");
            $('#addModal').modal('hide');
            fetchTableData(); // Refresh the table
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Failed to add item: " + error.message);
        });
    });
</script>