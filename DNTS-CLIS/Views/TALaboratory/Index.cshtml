@{
    ViewData["Title"] = "Technical Assistant Laboratory";
}
<style>
    .table th, .table td {
        vertical-align: middle;
        text-align: center;
    }

    .table thead th {
        background-color: #d1e7dd;
        border-bottom: 1px solid black;
        color: black;
    }
</style>
<h2>Laboratory: @ViewBag.LaboratoryName</h2>

<!-- TrackNo Dropdown -->
<div class="form-group" style="width:245px;margin-top:30px;">
    <label for="selectedTrackNo">Select Track No:</label>
    <select id="selectedTrackNo" class="form-control" onchange="fetchTableData()" style="text-align:center;">
        <option value="">-- Select Track No --</option>
        @foreach (var trackNo in ViewBag.TrackNos)
        {
            <option value="@trackNo">@trackNo</option>
        }
    </select>
</div>

<!-- Table to display data -->
<div class="mt-4">
    <h4 class="mb-3">Track Details</h4>
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover text-center" id="trackTable">
            <thead id="tableHead"></thead>
            <tbody id="tableBody"></tbody>
        </table>
    </div>
</div>
<!-- Modal for Editing Details -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content shadow-lg rounded">
            <div class="modal-header bg-secondary text-white">
                <h5 class="modal-title">
                    <i class="fas fa-edit"></i> Edit Item Details
                </h5>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <input type="hidden" id="editId">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="editCTN">CTN:</label>
                            <input type="text" id="editCTN" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label for="editParticular">Particular:</label>
                            <input type="text" id="editParticular" class="form-control">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="editBrand">Brand:</label>
                            <input type="text" id="editBrand" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label for="editSerialStickerNumber">Serial Sticker Number:</label>
                            <input type="text" id="editSerialStickerNumber" class="form-control">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="editStatus">Status:</label>
                            <input type="text" id="editStatus" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label for="editLocation">Location:</label>
                            <input type="text" id="editLocation" class="form-control">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="$('#editModal').modal('hide');">
                    <i class="fas fa-times"></i> Close
                </button>
                <button type="button" class="btn btn-success" id="saveEditBtn">
                    <i class="fas fa-save"></i> Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Repair Details -->
<div class="modal fade" id="repairModal" tabindex="-1" role="dialog" aria-labelledby="repairModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content shadow-lg rounded">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="repairModalLabel">
                    <i class="fas fa-tools"></i> Repair Details
                </h5>
            </div>
            <div class="modal-body p-4">
                <form id="repairForm">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="id">ID:</label>
                            <input type="text" id="id" class="form-control" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="ctn">CTN:</label>
                            <input type="text" id="ctn" class="form-control" readonly>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="particular">Particular:</label>
                            <input type="text" id="particular" class="form-control" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="brand">Brand:</label>
                            <input type="text" id="brand" class="form-control" readonly>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="serialStickerNumber">Serial Sticker Number:</label>
                            <input type="text" id="serialStickerNumber" class="form-control" readonly>
                        </div>
                        <div class="col-md-6">
                            <label for="status">Status:</label>
                            <input type="text" id="status" class="form-control" readonly>
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="col-md-6">
                            <label for="location">Location:</label>
                            <input type="text" id="location" class="form-control" readonly>
                        </div>
                    </div>

                    <div class="form-group mt-4">
                        <label for="description">Description of Damage:</label>
                        <textarea id="description" class="form-control" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-secondary" onclick="$('#repairModal').modal('hide');">
                    <i class="fas fa-times"></i> Close
                </button>

                <button type="button" class="btn btn-success" id="saveRepairBtn">
                    <i class="fas fa-save"></i> Save
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    function fetchTableData() {
        let trackNo = document.getElementById("selectedTrackNo").value;
        let tableHead = document.getElementById("tableHead");
        let tableBody = document.getElementById("tableBody");

        tableHead.innerHTML = "";
        tableBody.innerHTML = "";

        if (trackNo) {
            fetch(`/TALaboratory/GetTableDataOne?trackNo=${encodeURIComponent(trackNo)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Fetched data:", data);
                    if (!data || data.length === 0) {
                        tableBody.innerHTML = "<tr><td colspan='8'>No data available</td></tr>";
                        return;
                    }

                    // Get all possible columns from the first data item
                    const firstItem = data[0];
                    const allColumns = ["CTN", "Particular", "Brand", "SerialStickerNumber", "Status"];

                    // Only add Location if it exists in the data
                    if (firstItem.hasOwnProperty("Location")) {
                        allColumns.push("Location");
                    }

                    let headerRow = document.createElement("tr");
                    tableHead.appendChild(headerRow);

                    // Create headers for each column
                    allColumns.forEach(column => {
                        let th = document.createElement("th");
                        // Format the display name ("SerialStickerNumber" -> "Serial Sticker Number")
                        if (column === "SerialStickerNumber") {
                            th.textContent = "Serial Sticker Number";
                        } else {
                            th.textContent = column;
                        }
                        headerRow.appendChild(th);
                    });

                    let actionsHeader = document.createElement("th");
                    actionsHeader.textContent = "Actions";
                    headerRow.appendChild(actionsHeader);

                    // Create table rows for each data item
                    data.forEach(row => {
                        let tr = document.createElement("tr");

                        allColumns.forEach(column => {
                            let td = document.createElement("td");
                            td.textContent = getPropertyCaseInsensitive(row, column) || "";
                            tr.appendChild(td);
                        });

                        // Add actions
                        let actionsTd = document.createElement("td");

                       
    let repairBtn = document.createElement("button");
    repairBtn.innerHTML = '<i class="fas fa-tools"></i> Repair';
    repairBtn.className = "btn btn-warning btn-sm m-1";
    repairBtn.onclick = function() {
        openRepairModal(row);
    };
     


                        let editBtn = document.createElement("button");
                        editBtn.innerHTML = '<i class="fas fa-edit"></i> Edit';
                        editBtn.className = "btn btn-primary btn-sm m-1";
                        editBtn.onclick = function() {
                            editItem(row);
                        };

                        actionsTd.appendChild(editBtn);
                          actionsTd.appendChild(repairBtn);
                        tr.appendChild(actionsTd);

                        tableBody.appendChild(tr);
                    });
                })
                .catch(error => {
                    console.error('Error fetching table data:', error);
                    tableBody.innerHTML = `<tr><td colspan='8'>Error loading data: ${error.message}</td></tr>`;
                });
        } else {
            tableBody.innerHTML = "<tr><td colspan='8'>Please select a Track No</td></tr>";
        }
    }

    function editItem(item) {
        console.log("Opening edit modal for item:", item);

        // Populate the edit modal using case-insensitive getter
           document.getElementById("editId").value = getPropertyCaseInsensitive(item, "id");
        document.getElementById("editCTN").value = getPropertyCaseInsensitive(item, "ctn");
        document.getElementById("editParticular").value = getPropertyCaseInsensitive(item, "particular");
        document.getElementById("editBrand").value = getPropertyCaseInsensitive(item, "brand");
        document.getElementById("editSerialStickerNumber").value = getPropertyCaseInsensitive(item, "serialStickerNumber");
        document.getElementById("editStatus").value = getPropertyCaseInsensitive(item, "status");

        // Only try to set the Location if the edit field exists
        const locationField = document.getElementById("editLocation");
        if (locationField) {
            const hasLocation = Object.keys(item).some(key => key.toLowerCase() === "location");
            locationField.value = hasLocation ? getPropertyCaseInsensitive(item, "location") : "";

            // Show/hide the location field container based on whether it exists in the data
            const locationContainer = locationField.closest(".col-md-6");
            if (locationContainer) {
                locationContainer.style.display = hasLocation ? "block" : "none";
            }
        }

        // Show the modal using jQuery
        $('#editModal').modal('show');
    }

    // Helper function to get property values case-insensitively
    function getPropertyCaseInsensitive(obj, propertyName) {
        if (!obj || !propertyName) return "";

        // Direct match first
        if (obj[propertyName] !== undefined) return obj[propertyName];

        // Try case-insensitive match
        propertyName = propertyName.toLowerCase();
        for (let key in obj) {
            if (key.toLowerCase() === propertyName) {
                return obj[key];
            }
        }

        return "";
    }

    document.getElementById("saveEditBtn").addEventListener("click", function() {
        const trackNo = document.getElementById("selectedTrackNo").value;
        const id = document.getElementById("editId").value;

        if (!trackNo) {
            alert("Track No is required");
            return;
        }

        if (!id) {
            alert("Item ID is missing");
            return;
        }

        const data = {
            Id: parseInt(id),
            CTN: document.getElementById("editCTN").value,
            Particular: document.getElementById("editParticular").value,
            Brand: document.getElementById("editBrand").value,
            SerialStickerNumber: document.getElementById("editSerialStickerNumber").value,
            Status: document.getElementById("editStatus").value,
            Location: document.getElementById("editLocation").value,
            TrackNo: trackNo
        };

        console.log("Sending data to server:", data); 

        fetch('/TALaboratory/SaveEditedItem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            console.log("Server response:", response);

            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Server returned ${response.status}`);
                });
            }
            return response.json();
        })
        .then(result => {
            console.log("Success:", result);
            alert("Item updated successfully!");
            $('#editModal').modal('hide');
            fetchTableData(); 
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Failed to update item: " + error.message);
        });
    });

    document.addEventListener("DOMContentLoaded", function() {
        const trackNoSelect = document.getElementById("selectedTrackNo");
        if (trackNoSelect.value) {
            fetchTableData();
        }
    });

    //Repair
        function openRepairModal(item) {
        console.log("Opening repair modal for item:", item);

        // Populate the repair modal fields
        document.getElementById("id").value = getPropertyCaseInsensitive(item, "id");
        document.getElementById("ctn").value = getPropertyCaseInsensitive(item, "ctn");
        document.getElementById("particular").value = getPropertyCaseInsensitive(item, "particular");
        document.getElementById("brand").value = getPropertyCaseInsensitive(item, "brand");
        document.getElementById("serialStickerNumber").value = getPropertyCaseInsensitive(item, "serialStickerNumber");
        document.getElementById("status").value = getPropertyCaseInsensitive(item, "status");

        // Handle optional fields
        const locationField = document.getElementById("location");
        if (locationField) {
            const hasLocation = Object.keys(item).some(key => key.toLowerCase() === "location");
            locationField.value = hasLocation ? getPropertyCaseInsensitive(item, "location") : "";
        }

        const dateField = document.getElementById("dateOfAcquisition");
        if (dateField) {
            const hasDate = Object.keys(item).some(key => key.toLowerCase() === "dateofacquisition");
            dateField.value = hasDate ? getPropertyCaseInsensitive(item, "dateOfAcquisition") : "";
        }

        // Clear description field
        document.getElementById("description").value = "";

        // Show the modal
        $('#repairModal').modal('show');
    }

    // Handle Save Repair Button Click
    document.getElementById("saveRepairBtn").addEventListener("click", function () {
        const trackNo = document.getElementById("selectedTrackNo").value;
        const id = document.getElementById("id").value;
        const description = document.getElementById("description").value;

        // Validation checks
        if (!trackNo) {
            alert("Track No is required");
            return;
        }

        if (!id) {
            alert("Item ID is missing");
            return;
        }

        if (!description.trim()) {
            alert("Please provide a description of the damage");
            return;
        }

        // Prepare data to send to server
        const data = {
            ItemId: parseInt(id), 
            TrackNo: trackNo,
            Description: description,
            Status: "Pending", // Status set to Pending
            CTN: document.getElementById("ctn").value,
            Particular: document.getElementById("particular").value,
            Brand: document.getElementById("brand").value,
            SerialStickerNumber: document.getElementById("serialStickerNumber").value
        };

        // If location field exists, include it
        const locationField = document.getElementById("location");
        if (locationField && locationField.value) {
            data.Location = locationField.value;
        }

        console.log("Sending repair request data:", data);

        fetch('/TALaboratory/RequestRepair', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || `Server returned ${response.status}`);
                });
            }
            return response.json();
        })
        .then(result => {
            console.log("Success:", result);
            alert("Repair request submitted successfully!");
            $('#repairModal').modal('hide');
            fetchTableData(); 
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Failed to submit repair request: " + error.message);
        });
    });

</script>
